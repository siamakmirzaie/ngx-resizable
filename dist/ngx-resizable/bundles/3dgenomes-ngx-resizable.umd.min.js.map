{"version":3,"sources":["ng://@3dgenomes/ngx-resizable/lib/ngx-resizable.service.ts","ng://@3dgenomes/ngx-resizable/lib/window.service.ts","ng://@3dgenomes/ngx-resizable/lib/resizable/resizable.component.ts","ng://@3dgenomes/ngx-resizable/lib/resizable/drag.directive.ts","ng://@3dgenomes/ngx-resizable/lib/ngx-resizable.module.ts"],"names":["NgxResizableService","Injectable","args","providedIn","NgxResizeableWindowRef","Object","defineProperty","prototype","window","Éµ0","ResizableComponent","regionElement","windowRef","this","resizable","noTransition","rFlex","resizeStart","EventEmitter","resizing","resizeEnd","vx","vy","info","nativeElement","ngOnInit","flexBasis","style","ngAfterViewInit","nativeWindow","getComputedStyle","updateInfo","e","axis","parseInt","id","dragStart","direction","mouseEvent","originalEvent","dragDir","start","clientX","clientY","w","getPropertyValue","h","emit","dragEnd","dragging","offset","operand","height","width","Component","selector","template","providers","provide","useValue","encapsulation","ViewEncapsulation","None","ElementRef","HostBinding","Input","Output","DragDirective","DragStart","Drag","DragEnd","onMousedown","event","which","onMouseup","onMousemove","Directive","HostListener","NgxResizableModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"yYAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCMA,IAAAC,EAAA,WAAA,SAAAA,YAIEC,OAAAC,eAAIF,EAAAG,UAAA,eAAY,KAAhB,WACE,OARKC,4DAGRP,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHADd,GCNAM,EAO8CD,OAJ9CE,EAAA,WAwCE,SAAAA,EAAoBC,EAAmCC,GAAnCC,KAAAF,cAAAA,EAAmCE,KAAAD,UAAAA,EA/BvBC,KAAAC,WAAY,EACRD,KAAAE,cAAe,EAM1CF,KAAAG,OAAQ,EAEPH,KAAAI,YAAc,IAAIC,EAAAA,aAClBL,KAAAM,SAAW,IAAID,EAAAA,aACfL,KAAAO,UAAY,IAAIF,EAAAA,aASlBL,KAAAQ,GAAK,EACLR,KAAAS,GAAK,EAQLT,KAAAU,KAAO,GAGbV,KAAKW,cAAgBX,KAAKF,cAAca,cAgF5C,OA7EEd,EAAAH,UAAAkB,SAAA,WACOZ,KAAKG,QAASH,KAAKC,WAAY,GACpCD,KAAKa,UAAY,cAAeb,KAAKW,cAAcG,MAAQ,YACzD,oBAAqBd,KAAKW,cAAcG,MAAQ,kBAChD,wBAAyBd,KAAKW,cAAcG,MAAQ,sBAAwB,aAGhFjB,EAAAH,UAAAqB,gBAAA,WACEf,KAAKc,MAAQd,KAAKD,UAAUiB,aAAaC,iBAAiBjB,KAAKW,gBAGzDd,EAAAH,UAAAwB,WAAR,SAAmBC,GACjBnB,KAAKU,KAAY,OAAI,EAAOV,KAAKU,KAAa,QAAI,EAChC,MAAdV,KAAKoB,KACPpB,KAAKU,KAAY,MAAIW,SAASrB,KAAKW,cAAcG,MAAMd,KAAKG,MAAQH,KAAKa,UAAY,SAAU,IAE/Fb,KAAKU,KAAa,OAAIW,SAASrB,KAAKW,cAAcG,MAAMd,KAAKG,MAAQH,KAAKa,UAAY,UAAW,IAEnGb,KAAKU,KAAS,GAAIV,KAAKW,cAAcW,GACrCtB,KAAKU,KAAU,IAAIS,GAGdtB,EAAAH,UAAA6B,UAAP,SAAiBJ,EAAGK,OACZC,EAAaN,EAAEO,cAErB1B,KAAK2B,QAAUH,EACfxB,KAAKoB,KAAyB,SAAjBpB,KAAK2B,SAAuC,UAAjB3B,KAAK2B,QAAuB,IAAM,IAC1E3B,KAAK4B,MAAuB,MAAd5B,KAAKoB,KAAeK,EAAWI,QAAUJ,EAAWK,QAClE9B,KAAK+B,EAAIV,SAASrB,KAAKc,MAAMkB,iBAAiB,SAAU,IACxDhC,KAAKiC,EAAIZ,SAASrB,KAAKc,MAAMkB,iBAAiB,UAAW,IAEzDhC,KAAKI,YAAY8B,KAAK,CAAExB,KAAMV,KAAKU,OAGnCV,KAAKE,cAAe,GAGfL,EAAAH,UAAAyC,QAAP,SAAehB,OACPM,EAAaN,EAAEO,cAErB1B,KAAKkB,WAAWO,GAChBzB,KAAKO,UAAU2B,KAAK,CAAExB,KAAMV,KAAKU,OACjCV,KAAKE,cAAe,GAGfL,EAAAH,UAAA0C,SAAP,SAAgBjB,OACRM,EAAaN,EAAEO,cACfW,EAAwB,MAAdrC,KAAKoB,KAAgBpB,KAAK4B,MAAQH,EAAWI,QAAU7B,KAAK4B,MAAQH,EAAWK,QAE3FQ,EAAU,EACd,OAAQtC,KAAK2B,SACX,IAAK,MACHW,GAAW,EAEb,IAAK,aACGC,EAAUvC,KAAKiC,EAAII,EAASrC,KAAKS,GAAK6B,EAAW,KACnDtC,KAAKG,MACPH,KAAKa,UAAY0B,EAEjBvC,KAAKuC,OAASA,EAEhB,MACF,IAAK,OACHD,GAAW,EAEb,IAAK,YACGE,EAASxC,KAAK+B,EAAIM,EAASrC,KAAKQ,GAAK8B,EAAW,KAClDtC,KAAKG,MACPH,KAAKa,UAAY2B,EAEjBxC,KAAKwC,MAAQA,EAInBxC,KAAKkB,WAAWO,GAChBzB,KAAKM,SAAS4B,KAAK,CAAExB,KAAMV,KAAKU,4BAvHnC+B,EAAAA,UAASpD,KAAA,CAAC,CACTqD,SAAU,aACVC,SAAA,qSAEAC,UAAW,CAAE,CAAEC,QAAS,SAAUC,SAAQlD,IAC1CmD,cAAeC,EAAAA,kBAAkBC,04DARaC,EAAAA,kBACvC3D,wCAWN4D,EAAAA,YAAW9D,KAAA,CAAC,yCACZ8D,EAAAA,YAAW9D,KAAA,CAAC,sCACZ8D,EAAAA,YAAW9D,KAAA,CAAC,+BACZ8D,EAAAA,YAAW9D,KAAA,CAAC,mCACZ8D,EAAAA,YAAW9D,KAAA,CAAC,wCAEZ+D,EAAAA,qBACAA,EAAAA,2BAEAC,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,UAqGHxD,EAzHA,GCHAyD,EAAA,WAEA,SAAAA,IAKYtD,KAAAuD,UAAY,IAAIlD,EAAAA,aAChBL,KAAAwD,KAAO,IAAInD,EAAAA,aACXL,KAAAyD,QAAU,IAAIpD,EAAAA,aAEhBL,KAAAoC,UAAW,EAsBrB,OAnBEkB,EAAA5D,UAAAgE,YADA,SACYC,GACU,IAAhBA,EAAMC,QACR5D,KAAKoC,UAAW,EAChBpC,KAAKuD,UAAUrB,KAAK,CAAER,cAAeiC,MAIzCL,EAAA5D,UAAAmE,UADA,SACUF,GACJ3D,KAAKoC,UACPpC,KAAKyD,QAAQvB,KAAK,CAAER,cAAeiC,IAErC3D,KAAKoC,UAAW,GAGlBkB,EAAA5D,UAAAoE,YADA,SACYH,GACN3D,KAAKoC,UACPpC,KAAKwD,KAAKtB,KAAK,CAAER,cAAeiC,yBA5BrCI,EAAAA,UAAS1E,KAAA,CAAC,CACTqD,SAAU,yDAITW,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,4BAIAW,EAAAA,aAAY3E,KAAA,CAAC,YAAa,CAAC,8BAO3B2E,EAAAA,aAAY3E,KAAA,CAAC,mBAAoB,CAAC,gCAOlC2E,EAAAA,aAAY3E,KAAA,CAAC,qBAAsB,CAAC,cAMvCiE,EAjCA,GCAAW,EAAA,WAKA,SAAAA,KAakC,2BAbjCC,EAAAA,SAAQ7E,KAAA,CAAC,CACR8E,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZxE,EACAyD,GAEFgB,QAAS,CACPzE,EACAyD,OAG8BW,EAlBlC","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxResizableService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nfunction getWindow(): any {\r\n  return window;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxResizeableWindowRef {\r\n  get nativeWindow(): any {\r\n    return getWindow();\r\n  }\r\n}\r\n","import { Component, OnInit, HostBinding, Input, ElementRef, ViewEncapsulation, Output, EventEmitter, AfterViewInit } from '@angular/core';\r\nimport { NgxResizeableWindowRef } from '../window.service';\r\n\r\n@Component({\r\n  selector: 'rsz-layout',\r\n  templateUrl: 'resizable.component.html',\r\n  styleUrls: ['resizable.component.scss'],\r\n  providers: [ { provide: 'Window', useValue: window } ],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ResizableComponent implements OnInit, AfterViewInit {\r\n\r\n  @HostBinding('class.resizable') resizable = true;\r\n  @HostBinding('class.no-transition') noTransition = false;\r\n  @HostBinding('style.width') width;\r\n  @HostBinding('style.height') height;\r\n  @HostBinding('style.flex-basis') flexBasis;\r\n\r\n  @Input() directions;\r\n  @Input() rFlex = false;\r\n\r\n  @Output() resizeStart = new EventEmitter();\r\n  @Output() resizing = new EventEmitter();\r\n  @Output() resizeEnd = new EventEmitter();\r\n\r\n  private nativeElement;\r\n\r\n  private style;\r\n\r\n  private w;\r\n  private h;\r\n\r\n  private vx = 1;\r\n  private vy = 1;\r\n\r\n  private start;\r\n\r\n  private dragDir;\r\n\r\n  private axis;\r\n\r\n  private info = {};\r\n\r\n  constructor(private regionElement: ElementRef, private windowRef: NgxResizeableWindowRef) {\r\n    this.nativeElement = this.regionElement.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!this.rFlex) { this.resizable = false; } // Added to permit use of component for all cells\r\n    this.flexBasis = 'flexBasis' in this.nativeElement.style ? 'flexBasis' :\r\n      'webkitFlexBasis' in this.nativeElement.style ? 'webkitFlexBasis' :\r\n      'msFlexPreferredSize' in this.nativeElement.style ? 'msFlexPreferredSize' : 'flexBasis';\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.style = this.windowRef.nativeWindow.getComputedStyle(this.nativeElement);\r\n  }\r\n\r\n  private updateInfo(e) {\r\n    this.info['width'] = false; this.info['height'] = false;\r\n    if (this.axis === 'x') {\r\n      this.info['width'] = parseInt(this.nativeElement.style[this.rFlex ? this.flexBasis : 'width'], 10);\r\n    } else {\r\n      this.info['height'] = parseInt(this.nativeElement.style[this.rFlex ? this.flexBasis : 'height'], 10);\r\n    }\r\n    this.info['id'] = this.nativeElement.id;\r\n    this.info['evt'] = e;\r\n  }\r\n\r\n  public dragStart(e, direction) {\r\n    const mouseEvent = e.originalEvent;\r\n\r\n    this.dragDir = direction;\r\n    this.axis = (this.dragDir === 'left' || this.dragDir === 'right') ? 'x' : 'y';\r\n    this.start = (this.axis === 'x' ? mouseEvent.clientX : mouseEvent.clientY);\r\n    this.w = parseInt(this.style.getPropertyValue('width'), 10);\r\n    this.h = parseInt(this.style.getPropertyValue('height'), 10);\r\n\r\n    this.resizeStart.emit({ info: this.info });\r\n\r\n    // prevent transition while dragging\r\n    this.noTransition = true;\r\n  }\r\n\r\n  public dragEnd(e) {\r\n    const mouseEvent = e.originalEvent;\r\n\r\n    this.updateInfo(mouseEvent);\r\n    this.resizeEnd.emit({ info: this.info });\r\n    this.noTransition = false;\r\n  }\r\n\r\n  public dragging(e) {\r\n    const mouseEvent = e.originalEvent;\r\n    const offset = (this.axis === 'x') ? this.start - mouseEvent.clientX : this.start - mouseEvent.clientY;\r\n\r\n    let operand = 1;\r\n    switch (this.dragDir) {\r\n      case 'top':\r\n        operand = -1;\r\n        /* falls through */\r\n      case 'bottom':\r\n        const height = (this.h - offset * this.vy * operand) + 'px';\r\n        if (this.rFlex) {\r\n          this.flexBasis = height;\r\n        } else {\r\n          this.height = height;\r\n        }\r\n        break;\r\n      case 'left':\r\n        operand = -1;\r\n        /* falls through */\r\n      case 'right':\r\n        const width = (this.w - offset * this.vx * operand) + 'px';\r\n        if (this.rFlex) {\r\n          this.flexBasis = width;\r\n        } else {\r\n          this.width = width;\r\n        }\r\n        break;\r\n    }\r\n    this.updateInfo(mouseEvent);\r\n    this.resizing.emit({ info: this.info });\r\n  }\r\n}\r\n","import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[rszDragHandle]'\r\n})\r\nexport class DragDirective {\r\n\r\n  @Output() DragStart = new EventEmitter();\r\n  @Output() Drag = new EventEmitter();\r\n  @Output() DragEnd = new EventEmitter();\r\n\r\n  private dragging = false;\r\n\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event) {\r\n    if (event.which === 1) {\r\n      this.dragging = true;\r\n      this.DragStart.emit({ originalEvent: event });\r\n    }\r\n  }\r\n  @HostListener('document:mouseup', ['$event'])\r\n  onMouseup(event) {\r\n    if (this.dragging) {\r\n      this.DragEnd.emit({ originalEvent: event });\r\n    }\r\n    this.dragging = false;\r\n  }\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onMousemove(event: MouseEvent) {\r\n    if (this.dragging) {\r\n      this.Drag.emit({ originalEvent: event });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResizableComponent } from './resizable/resizable.component';\r\nimport { DragDirective } from './resizable/drag.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ResizableComponent,\r\n    DragDirective\r\n  ],\r\n  exports: [\r\n    ResizableComponent,\r\n    DragDirective\r\n  ]\r\n})\r\nexport class NgxResizableModule { }\r\n"]}